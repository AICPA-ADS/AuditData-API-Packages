{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace {{packageName}}.Serialization
{
    public class JsonNamingPolicyDecorator : JsonNamingPolicy
    {
        private readonly JsonNamingPolicy _underlyingNamingPolicy;

        protected JsonNamingPolicyDecorator(JsonNamingPolicy underlyingNamingPolicy)
        {
            _underlyingNamingPolicy = underlyingNamingPolicy;
        }

        public override string ConvertName(string name)
        {
            return _underlyingNamingPolicy == null ? name : _underlyingNamingPolicy.ConvertName(name);
        }
    }
    
    public class DictionaryLookupNamingPolicy : JsonNamingPolicyDecorator
    {
        private readonly IDictionary<string, string> _dictionary;

        public DictionaryLookupNamingPolicy(IDictionary<string, string> dictionary,
            JsonNamingPolicy underlyingNamingPolicy) : base(underlyingNamingPolicy)
        {
            _dictionary = dictionary ?? throw new ArgumentNullException(nameof(dictionary));
        }

        public override string ConvertName(string name)
        {
            return _dictionary.TryGetValue(name, out var value) ? value : base.ConvertName(name);
        }
    }

    public class OpenAPIJsonStringEnumConverter : JsonConverterFactory
    {
        private readonly bool _allowIntegerValues;
        private readonly JsonStringEnumConverter _baseConverter;
        private readonly JsonNamingPolicy _namingPolicy;

        public OpenAPIJsonStringEnumConverter(JsonNamingPolicy namingPolicy = null, bool allowIntegerValues = true)
        {
            _namingPolicy = namingPolicy;
            _allowIntegerValues = allowIntegerValues;
            _baseConverter = new JsonStringEnumConverter(namingPolicy, allowIntegerValues);
        }

        public override bool CanConvert(Type typeToConvert)
        {
            return _baseConverter.CanConvert(typeToConvert);
        }

        public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
        {
            var query = typeToConvert.GetFields(BindingFlags.Public | BindingFlags.Static)
                .Select(field => new {field, attr = field.GetCustomAttribute<EnumMemberAttribute>()})
                .Where(@t => @t.attr != null)
                .Select(@t => (@t.field.Name, @t.attr.Value));
            var dictionary = query.ToDictionary(p => p.Item1, p => p.Item2);
            if (dictionary.Count > 0)
                return new JsonStringEnumConverter(new DictionaryLookupNamingPolicy(dictionary, _namingPolicy),
                    _allowIntegerValues).CreateConverter(typeToConvert, options);
            return _baseConverter.CreateConverter(typeToConvert, options);
        }
    }

    public static class SerializerOptions
    {
        public static System.Text.Json.JsonSerializerOptions GetDefault()
        {
            var ret = new System.Text.Json.JsonSerializerOptions()
            {
                // TODO Configure serialization to use DataMember attrib
                PropertyNamingPolicy = null,
            };
            ret.Converters.Add(new Org.Aicpa.AuditData.Serialization.OpenAPIJsonStringEnumConverter(allowIntegerValues: false));
            return ret;
        }
    }
}
